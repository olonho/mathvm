*** TODO ***
* int -> logic cast
* TRANSLATOR check that no expr like int x = y++ (load on stack what stored)
* check functions declaration with other code mix. 
* TRANSLATOR for with outer var
* TRANSLATOR IMOD operation check

*** GOOD TODO ***
* native call
* types check. void -> int
* remove unused code
* remove dump load in the function beginning

*** WONTDO ***
* bytecode for visit function beginning (signature)
* get bug with function names collision
* assert(false); in the end of each visitor

*** DONE ***
* providing values from main
* typed swap
* read arguments by function
* calls node check
* function.mvm test
* while test bug fix
* fix dstack growing 
* jumps
* for.mvm test
* unexpected context load in for

* drop dstack after function exec
* basic test. 
* arithmetic ops
* casts
* pop/push as template function
* pop from stack
* Function 0 exec
* TRANSLATOR outer vars assign
* vars location
* create function map
* create constant map
* code stumps

* check that it is impossible to call function
  with wrong arguments
* bind vars from arguments
* type cast assign
* types cast set
* return
* calls is fix
* casts order in mathvm.h
* function arguments cast 
* function call
* basic function call (stumb)
* function agruments

* Arithmetic AND 
* Arithmetic OR 
* Arithmetic XOR 
* while
* while, for => jumps ?
* for
* range
* Unary minus
* if
* unary operations

* assign cast
* types casts for binaryOp (left op)
* ensure with position 
* visitCallNode type
* undefined function call error
* IMUL DMUL bug
* var load
* var context
* print node
* print types
* conversions before assignment
* types stack
* use string constants in code  (Code::_constants)

* just arithmetic bytecode
* bytecode var declaration
* review code 
* use string constants in code  (Code::_constants)
* basic assign
* visit literals
* disassemble with string literals
* TranslatedFunction disassemble
* basic test translator
* print some code
* simple visitor with function names
* folder with examples
* TranslatedFunction
* Mathvm:Bytecode ?
* Mathvm::BytecodeFunction ?
* TranslatedFunction stumb
* Code::disassemble ?
* my code basic imp
* understand Code** usage
* NULL status< parseProgramm
* compile bytecodeTranslator
* get all what done before